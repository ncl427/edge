// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package current_api_session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ExtendCurrentIdentityAuthenticatorHandlerFunc turns a function with the right signature into a extend current identity authenticator handler
type ExtendCurrentIdentityAuthenticatorHandlerFunc func(ExtendCurrentIdentityAuthenticatorParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ExtendCurrentIdentityAuthenticatorHandlerFunc) Handle(params ExtendCurrentIdentityAuthenticatorParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ExtendCurrentIdentityAuthenticatorHandler interface for that can handle valid extend current identity authenticator params
type ExtendCurrentIdentityAuthenticatorHandler interface {
	Handle(ExtendCurrentIdentityAuthenticatorParams, interface{}) middleware.Responder
}

// NewExtendCurrentIdentityAuthenticator creates a new http.Handler for the extend current identity authenticator operation
func NewExtendCurrentIdentityAuthenticator(ctx *middleware.Context, handler ExtendCurrentIdentityAuthenticatorHandler) *ExtendCurrentIdentityAuthenticator {
	return &ExtendCurrentIdentityAuthenticator{Context: ctx, Handler: handler}
}

/* ExtendCurrentIdentityAuthenticator swagger:route POST /current-identity/authenticators/{id}/extend Current API Session Enroll Extend Enrollment extendCurrentIdentityAuthenticator

Allows the current identity to recieve a new certificate associated with a certificate based authenticator

This endpoint only functions for certificates issued by the controller. 3rd party certificates are not handled.
Allows an identity to extend its certificate's expiration date by using its current and valid client certificate to submit a CSR. This CSR may be passed in using a new private key, thus allowing private key rotation.
The response from this endpoint is a new client certificate which the client must  be verified via the /authenticators/{id}/extend-verify endpoint.
After verification is completion any new connections must be made with new certificate. Prior to verification the old client certificate remains active.

*/
type ExtendCurrentIdentityAuthenticator struct {
	Context *middleware.Context
	Handler ExtendCurrentIdentityAuthenticatorHandler
}

func (o *ExtendCurrentIdentityAuthenticator) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewExtendCurrentIdentityAuthenticatorParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
