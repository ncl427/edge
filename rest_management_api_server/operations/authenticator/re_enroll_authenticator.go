// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package authenticator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReEnrollAuthenticatorHandlerFunc turns a function with the right signature into a re enroll authenticator handler
type ReEnrollAuthenticatorHandlerFunc func(ReEnrollAuthenticatorParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ReEnrollAuthenticatorHandlerFunc) Handle(params ReEnrollAuthenticatorParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ReEnrollAuthenticatorHandler interface for that can handle valid re enroll authenticator params
type ReEnrollAuthenticatorHandler interface {
	Handle(ReEnrollAuthenticatorParams, interface{}) middleware.Responder
}

// NewReEnrollAuthenticator creates a new http.Handler for the re enroll authenticator operation
func NewReEnrollAuthenticator(ctx *middleware.Context, handler ReEnrollAuthenticatorHandler) *ReEnrollAuthenticator {
	return &ReEnrollAuthenticator{Context: ctx, Handler: handler}
}

/* ReEnrollAuthenticator swagger:route POST /authenticators/{id}/re-enroll Authenticator reEnrollAuthenticator

Reverts an authenticator to an enrollment

Allows an authenticator to be reverted to an enrollment and allows re-enrollment to occur. On success the
created enrollment record response is provided and the source authenticator record will be deleted. The
enrollment created depends on the authenticator. UPDB authenticators result in UPDB enrollments, CERT
authenticators result in OTT enrollments, CERT + CA authenticators result in OTTCA enrollments.


*/
type ReEnrollAuthenticator struct {
	Context *middleware.Context
	Handler ReEnrollAuthenticatorHandler
}

func (o *ReEnrollAuthenticator) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReEnrollAuthenticatorParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
