// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package external_j_w_t_signer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new external j w t signer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for external j w t signer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateExternalJwtSigner(params *CreateExternalJwtSignerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateExternalJwtSignerCreated, error)

	DeleteExternalJwtSigner(params *DeleteExternalJwtSignerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalJwtSignerOK, error)

	DetailExternalJwtSigner(params *DetailExternalJwtSignerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetailExternalJwtSignerOK, error)

	ListExternalJwtSigners(params *ListExternalJwtSignersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExternalJwtSignersOK, error)

	PatchExternalJwtSigner(params *PatchExternalJwtSignerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchExternalJwtSignerOK, error)

	UpdateExternalJwtSigner(params *UpdateExternalJwtSignerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateExternalJwtSignerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateExternalJwtSigner creates an external j w t signer

  Creates an External JWT Signer. Requires admin access.
*/
func (a *Client) CreateExternalJwtSigner(params *CreateExternalJwtSignerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateExternalJwtSignerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExternalJwtSignerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createExternalJwtSigner",
		Method:             "POST",
		PathPattern:        "/external-jwt-signers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateExternalJwtSignerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExternalJwtSignerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createExternalJwtSigner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteExternalJwtSigner deletes an external j w t signer

  Delete an External JWT Signer by id. Requires admin access.

*/
func (a *Client) DeleteExternalJwtSigner(params *DeleteExternalJwtSignerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalJwtSignerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExternalJwtSignerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteExternalJwtSigner",
		Method:             "DELETE",
		PathPattern:        "/external-jwt-signers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExternalJwtSignerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExternalJwtSignerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteExternalJwtSigner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DetailExternalJwtSigner retrieves a single external j w t signer

  Retrieves a single External JWT Signer by id. Requires admin access.
*/
func (a *Client) DetailExternalJwtSigner(params *DetailExternalJwtSignerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetailExternalJwtSignerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetailExternalJwtSignerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detailExternalJwtSigner",
		Method:             "GET",
		PathPattern:        "/external-jwt-signers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DetailExternalJwtSignerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetailExternalJwtSignerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detailExternalJwtSigner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListExternalJwtSigners lists external j w t signers

  Retrieves a list of external JWT signers for authentication
*/
func (a *Client) ListExternalJwtSigners(params *ListExternalJwtSignersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExternalJwtSignersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListExternalJwtSignersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listExternalJwtSigners",
		Method:             "GET",
		PathPattern:        "/external-jwt-signers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListExternalJwtSignersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListExternalJwtSignersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listExternalJwtSigners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchExternalJwtSigner updates the supplied fields on an external j w t signer

  Update only the supplied fields on an External JWT Signer by id. Requires admin access.
*/
func (a *Client) PatchExternalJwtSigner(params *PatchExternalJwtSignerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchExternalJwtSignerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchExternalJwtSignerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchExternalJwtSigner",
		Method:             "PATCH",
		PathPattern:        "/external-jwt-signers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchExternalJwtSignerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchExternalJwtSignerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchExternalJwtSigner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateExternalJwtSigner updates all fields on an external j w t signer

  Update all fields on an External JWT Signer by id. Requires admin access.
*/
func (a *Client) UpdateExternalJwtSigner(params *UpdateExternalJwtSignerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateExternalJwtSignerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateExternalJwtSignerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateExternalJwtSigner",
		Method:             "PUT",
		PathPattern:        "/external-jwt-signers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateExternalJwtSignerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateExternalJwtSignerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateExternalJwtSigner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
