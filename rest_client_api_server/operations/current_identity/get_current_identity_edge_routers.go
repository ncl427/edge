// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package current_identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCurrentIdentityEdgeRoutersHandlerFunc turns a function with the right signature into a get current identity edge routers handler
type GetCurrentIdentityEdgeRoutersHandlerFunc func(GetCurrentIdentityEdgeRoutersParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCurrentIdentityEdgeRoutersHandlerFunc) Handle(params GetCurrentIdentityEdgeRoutersParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCurrentIdentityEdgeRoutersHandler interface for that can handle valid get current identity edge routers params
type GetCurrentIdentityEdgeRoutersHandler interface {
	Handle(GetCurrentIdentityEdgeRoutersParams, interface{}) middleware.Responder
}

// NewGetCurrentIdentityEdgeRouters creates a new http.Handler for the get current identity edge routers operation
func NewGetCurrentIdentityEdgeRouters(ctx *middleware.Context, handler GetCurrentIdentityEdgeRoutersHandler) *GetCurrentIdentityEdgeRouters {
	return &GetCurrentIdentityEdgeRouters{Context: ctx, Handler: handler}
}

/* GetCurrentIdentityEdgeRouters swagger:route GET /current-identity/edge-routers Current Identity Edge Router getCurrentIdentityEdgeRouters

Return this list of Edge Routers the identity has access to

Lists the Edge Routers that the current identity has access to via policies. The data returned
includes their address and online status


*/
type GetCurrentIdentityEdgeRouters struct {
	Context *middleware.Context
	Handler GetCurrentIdentityEdgeRoutersHandler
}

func (o *GetCurrentIdentityEdgeRouters) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCurrentIdentityEdgeRoutersParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
