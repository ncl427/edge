// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExternalJwtSignerDetail A External JWT Signer resource
//
// swagger:model externalJwtSignerDetail
type ExternalJwtSignerDetail struct {
	BaseEntity

	// cert pem
	// Required: true
	CertPem *string `json:"certPem"`

	// common name
	// Required: true
	CommonName *string `json:"commonName"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// fingerprint
	// Required: true
	Fingerprint *string `json:"fingerprint"`

	// name
	// Example: MyApps Signer
	// Required: true
	Name *string `json:"name"`

	// not after
	// Required: true
	// Format: date-time
	NotAfter *strfmt.DateTime `json:"notAfter"`

	// not before
	// Required: true
	// Format: date-time
	NotBefore *strfmt.DateTime `json:"notBefore"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ExternalJwtSignerDetail) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseEntity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseEntity = aO0

	// AO1
	var dataAO1 struct {
		CertPem *string `json:"certPem"`

		CommonName *string `json:"commonName"`

		Enabled *bool `json:"enabled"`

		Fingerprint *string `json:"fingerprint"`

		Name *string `json:"name"`

		NotAfter *strfmt.DateTime `json:"notAfter"`

		NotBefore *strfmt.DateTime `json:"notBefore"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CertPem = dataAO1.CertPem

	m.CommonName = dataAO1.CommonName

	m.Enabled = dataAO1.Enabled

	m.Fingerprint = dataAO1.Fingerprint

	m.Name = dataAO1.Name

	m.NotAfter = dataAO1.NotAfter

	m.NotBefore = dataAO1.NotBefore

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ExternalJwtSignerDetail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CertPem *string `json:"certPem"`

		CommonName *string `json:"commonName"`

		Enabled *bool `json:"enabled"`

		Fingerprint *string `json:"fingerprint"`

		Name *string `json:"name"`

		NotAfter *strfmt.DateTime `json:"notAfter"`

		NotBefore *strfmt.DateTime `json:"notBefore"`
	}

	dataAO1.CertPem = m.CertPem

	dataAO1.CommonName = m.CommonName

	dataAO1.Enabled = m.Enabled

	dataAO1.Fingerprint = m.Fingerprint

	dataAO1.Name = m.Name

	dataAO1.NotAfter = m.NotAfter

	dataAO1.NotBefore = m.NotBefore

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this external jwt signer detail
func (m *ExternalJwtSignerDetail) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseEntity
	if err := m.BaseEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertPem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotBefore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalJwtSignerDetail) validateCertPem(formats strfmt.Registry) error {

	if err := validate.Required("certPem", "body", m.CertPem); err != nil {
		return err
	}

	return nil
}

func (m *ExternalJwtSignerDetail) validateCommonName(formats strfmt.Registry) error {

	if err := validate.Required("commonName", "body", m.CommonName); err != nil {
		return err
	}

	return nil
}

func (m *ExternalJwtSignerDetail) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *ExternalJwtSignerDetail) validateFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("fingerprint", "body", m.Fingerprint); err != nil {
		return err
	}

	return nil
}

func (m *ExternalJwtSignerDetail) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ExternalJwtSignerDetail) validateNotAfter(formats strfmt.Registry) error {

	if err := validate.Required("notAfter", "body", m.NotAfter); err != nil {
		return err
	}

	if err := validate.FormatOf("notAfter", "body", "date-time", m.NotAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExternalJwtSignerDetail) validateNotBefore(formats strfmt.Registry) error {

	if err := validate.Required("notBefore", "body", m.NotBefore); err != nil {
		return err
	}

	if err := validate.FormatOf("notBefore", "body", "date-time", m.NotBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this external jwt signer detail based on the context it is used
func (m *ExternalJwtSignerDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseEntity
	if err := m.BaseEntity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ExternalJwtSignerDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalJwtSignerDetail) UnmarshalBinary(b []byte) error {
	var res ExternalJwtSignerDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
